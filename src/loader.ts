import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { Config, ConfigSchema } from './types.js';
import { pathToFileURL } from 'url';

/**
 * Reads configuration from a file (TypeScript or YAML)
 */
export async function readConfigFromFile(configPath: string): Promise<Config> {
  try {
    const extension = path.extname(configPath).toLowerCase();
    
    if (extension === '.ts' || extension === '.js' || extension === '.mjs') {
      // Load from TypeScript/JavaScript module
      console.log(`üì¶ Loading configuration from TypeScript/JavaScript module: ${configPath}`);
      return await loadTsConfig(configPath);
    } else if (extension === '.yml' || extension === '.yaml') {
      // Load from YAML file
      console.log(`üì¶ Loading configuration from YAML file: ${configPath}`);
      return loadYamlConfig(configPath);
    } else {
      throw new Error(`Unsupported file format: ${extension}. Please use .ts, .js, .mjs, .yml, or .yaml`);
    }
  } catch (error) {
    console.error(`‚ùå Error loading configuration from ${configPath}:`, error);
    throw error;
  }
}

/**
 * Loads a configuration from a TypeScript/JavaScript module
 */
async function loadTsConfig(configPath: string): Promise<Config> {
  try {
    // Convert path to URL for ES modules
    const moduleUrl = pathToFileURL(path.resolve(configPath)).href;
    
    // Dynamically import the module
    const module = await import(moduleUrl);
    
    // Get the default export or named export 'config'
    const config = module.default || module.config;
    
    if (!config) {
      throw new Error(`Module does not export a default configuration or 'config' export`);
    }
    
    // Validate with Zod schema
    return ConfigSchema.parse(config);
  } catch (error) {
    console.error(`‚ùå Error loading TypeScript config from ${configPath}:`, error);
    throw error;
  }
}

/**
 * Loads a configuration from a YAML file
 */
export function loadYamlConfig(configPath: string): Config {
  try {
    const fileContents = fs.readFileSync(configPath, 'utf8');
    const config = yaml.load(fileContents) as Config;
    
    // Ensure products and prices arrays exist
    if (!config.products) config.products = [];
    if (!config.prices) config.prices = [];
    
    // Validate with Zod schema
    return ConfigSchema.parse(config);
  } catch (error) {
    console.error(`‚ùå Error loading YAML config from ${configPath}:`, error);
    throw error;
  }
}

/**
 * Writes configuration to a file (TypeScript or YAML)
 */
export async function writeConfigToFile(configPath: string, config: Config): Promise<void> {
  try {
    const extension = path.extname(configPath).toLowerCase();
    
    if (extension === '.ts') {
      // Write to TypeScript file
      await writeTsConfig(configPath, config);
    } else if (extension === '.yml' || extension === '.yaml') {
      // Write to YAML file
      saveYamlConfig(configPath, config);
    } else {
      throw new Error(`Unsupported file format for writing: ${extension}. Please use .ts, .yml, or .yaml`);
    }
    
    console.log(`‚úÖ Configuration saved to ${configPath}`);
  } catch (error) {
    console.error(`‚ùå Error saving config to ${configPath}:`, error);
    throw error;
  }
}

/**
 * Writes configuration to a TypeScript file
 */
async function writeTsConfig(configPath: string, config: Config): Promise<void> {
  try {
    // Create a nicely formatted TypeScript representation
    const content = `/**
 * This file is auto-generated by prices-as-code.
 * Manual changes may be overwritten.
 */
import { Config } from 'prices-as-code';

export const config: Config = ${JSON.stringify(config, null, 2)};

export default config;
`;
    
    fs.writeFileSync(configPath, content, 'utf8');
  } catch (error) {
    console.error(`‚ùå Error saving TypeScript config to ${configPath}:`, error);
    throw error;
  }
}

/**
 * Writes configuration to a YAML file
 */
export function saveYamlConfig(configPath: string, config: Config): void {
  try {
    const yamlContent = yaml.dump(config, { noRefs: true });
    fs.writeFileSync(configPath, yamlContent, 'utf8');
  } catch (error) {
    console.error(`‚ùå Error saving YAML config to ${configPath}:`, error);
    throw error;
  }
}